import { writeFile } from "fs/promises";
import prettier from "prettier";
import colors from "tailwindcss/colors.js";

/** Unwanted colors on the exported tailwind object */
export const unwanted = [
    // These don't have a scale
    "inherit",
    "current",
    "transparent",
    "black",
    "white",

    // Deprecated
    "lightBlue",
    "warmGray",
    "trueGray",
    "coolGray",
    "blueGray"
];

// Get all the colors
const colorsToGenerate = Object.keys(colors).filter((color) => !unwanted.includes(color));

// Create the color map
const colorMap: string[] = [];
for (const color of colorsToGenerate) {
    const colorValue = (colors as unknown as Record<string, Record<string, string>>)[color];

    const shadeMap: string[] = [];
    for (const shade of Object.keys(colorValue)) {
        shadeMap.push(`"${shade}": ${colorValue[shade]}`);
    }

    colorMap.push(`"${color}": (${shadeMap.join(",")})`);
}

// Generate the file
let file = `// This file is generated by scripts/colors.ts

$colors: (${colorMap.join(",")});
`;

// Run the file through prettier (cuz this is one single line)
const config = {
    // Extend the prettier config from the project
    ...(await prettier.resolveConfig(process.cwd())),
    parser: "scss"
};

file = await prettier.format(file, config);

// Write the file
await writeFile("src/styles/colors.scss", file);
